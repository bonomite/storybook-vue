@use "sass:map";

// v1 legacy support
@mixin typeface($type, $size) {
  font-family: var(--font-family-#{$type});
  letter-spacing: var(--letter-spacing-#{$type});
  font-weight: var(--font-weight-#{$type});

  line-height: var(--line-height-#{$size});
  font-size: var(--font-size-#{$size});
}
// v1 legacy support

// font config
@mixin font-config($config-map) {
  @each $breakpoint, $values in $config-map {
    // @debug "breakpoint = #{$breakpoint}";
    @if $breakpoint == "default" {
      @each $key, $value in map.get($values, "values") {
        #{$key}: #{$value};
      }
    } @else {
      @media screen and (min-width: $breakpoint) {
        @each $key, $value in map.get($values, "values") {
          #{$key}: #{$value};
        }
      }
    }
  }
}

//spacing
$spacing-base: 8;
@function spacing($y) {
  @return calc($spacing-base * $y) + px;
}
@function spacingXY($x, $y) {
  @return calc($spacing-base * $x) + px calc($spacing-base * $y) + px;
}
@function spacingTRBL($t, $r, $b, $l) {
  @return calc($spacing-base * $t) + px calc($spacing-base * $r) + px calc($spacing-base * $b) + px
    calc($spacing-base * $l) + px;
}

// hex to rgb
@function hex2rgb($hexColor) {
  @return "#{red($hexColor)},#{green($hexColor)},#{blue($hexColor)}";
}
